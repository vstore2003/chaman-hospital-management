// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER") // USER or ADMIN
  password      String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations for patients (if user is a patient)
  patientProfile Patient?
  appointments   Appointment[] @relation("PatientAppointments")
  medicalRecords MedicalRecord[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Patient {
  id          String   @id @default(cuid())
  userId      String?  @unique
  name        String
  email       String   @unique
  phone       String?
  address     String?
  dateOfBirth DateTime?
  gender      String?
  bloodGroup  String?
  emergencyContact String?
  
  user           User?           @relation(fields: [userId], references: [id])
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Doctor {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  phone          String?
  specialization String
  qualification  String?
  experience     Int?     // years of experience
  consultationFee Float?
  availability   String?  // JSON string for schedule
  
  appointments Appointment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id          String   @id @default(cuid())
  date        DateTime
  time        String
  status      String   @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED, NO_SHOW
  reason      String?
  notes       String?
  
  patientId String
  doctorId  String
  userId    String?
  
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  user    User?   @relation("PatientAppointments", fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicalRecord {
  id          String   @id @default(cuid())
  diagnosis   String
  treatment   String
  prescription String?
  notes       String?
  recordDate  DateTime @default(now())
  
  patientId String
  userId    String?
  
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  head        String? // Head of department
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Staff {
  id         String @id @default(cuid())
  name       String
  email      String @unique
  phone      String?
  position   String
  department String?
  salary     Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
